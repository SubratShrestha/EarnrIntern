[{"/mnt/d/Projects/EarnrIntern/frontend/src/reportWebVitals.js":"1","/mnt/d/Projects/EarnrIntern/frontend/src/index.js":"2","/mnt/d/Projects/EarnrIntern/frontend/src/App.js":"3","/mnt/d/Projects/EarnrIntern/frontend/src/components/AllInvestments.js":"4","/mnt/d/Projects/EarnrIntern/frontend/src/components/InvestmentForm.js":"5"},{"size":362,"mtime":1609562312098,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1609383596606,"results":"8","hashOfConfig":"7"},{"size":1340,"mtime":1609722001058,"results":"9","hashOfConfig":"7"},{"size":1911,"mtime":1609720156737,"results":"10","hashOfConfig":"7"},{"size":4949,"mtime":1609718340887,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pdp74o",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/mnt/d/Projects/EarnrIntern/frontend/src/reportWebVitals.js",[],"/mnt/d/Projects/EarnrIntern/frontend/src/index.js",[],"/mnt/d/Projects/EarnrIntern/frontend/src/App.js",[],"/mnt/d/Projects/EarnrIntern/frontend/src/components/AllInvestments.js",[],"/mnt/d/Projects/EarnrIntern/frontend/src/components/InvestmentForm.js",["23"],"import { useState, useEffect } from 'react';\nimport {\n  Schema,\n  Form,\n  FormControl,\n  FormGroup,\n  ControlLabel,\n  DatePicker,\n  RadioGroup,\n  Radio,\n  InputNumber,\n  Button,\n  Popover,\n  FlexboxGrid,\n  Whisper,\n  Icon,\n  Modal,\n} from 'rsuite';\n\nexport default function InvestmentForm() {\n  const { StringType, NumberType, DateType } = Schema.Types;\n  const [formValue, setFormValue] = useState({});\n  const [form, setFormRef] = useState(null);\n  const [modalShow, setModalShow] = useState(false);\n  const speaker = (\n    <Popover title=\"Select the type of Investment\">\n      <p>Premium: $10,000 to $250,000</p>\n      <p>Select: $25,000 to $250,000</p>\n    </Popover>\n  );\n\n  const model = Schema.Model({\n    firstname: StringType().isRequired('First name required to make investment'),\n    lastname: StringType().isRequired('Last name required to make investment'),\n    dob: DateType().isRequired('valid date required'),\n    email: StringType()\n      .isEmail('please enter a valid email')\n      .isRequired('Email required to make investment'),\n    number: NumberType().isRequired('Number required to make investment'),\n    type: StringType().isRequired('Type of investment required'),\n    amount: NumberType()\n      .isRequired('Amount required to make investment')\n      .addRule((value, data) => {\n        if (data.type === '') {\n          return false;\n        }\n        if (data.type === 'Premium') {\n          if (value < 10000 || value > 250000) {\n            return false;\n          }\n        } else if (data.type === 'Select') {\n          if (value < 25000 || value > 250000) {\n            return false;\n          }\n        }\n        return true;\n      }, 'Amount too high or too low for the type of investment.')\n  });\n\n  const fixDate = (date) => {\n    if (!date) {\n      return;\n    }\n    return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n  }\n\n  const handleSubmit = () => {\n    if (!form.check()) {\n      return;\n    }\n    setModalShow(true);\n    fetch('http://localhost:8000/api/invest/new', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        ...formValue\n      })\n    }).then(res => res.json()).then(data => console.log(data));\n  }\n\n  return (\n    <>\n      <Form\n        layout=\"horizontal\"\n        onChange={formValue => setFormValue({ ...formValue, dob: fixDate(formValue.dob) })}\n        model={model}\n        ref={(ref) => setFormRef(ref)}\n      >\n        <FormGroup>\n          <ControlLabel>First Name</ControlLabel>\n          <FormControl name=\"firstname\" />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Last name</ControlLabel>\n          <FormControl name=\"lastname\" />\n        </FormGroup>\n        <CustomField\n          accepter={DatePicker}\n          name=\"dob\"\n          label=\"Date of birth\"\n        />\n        <FormGroup>\n          <ControlLabel>\n            Email\n            </ControlLabel>\n          <FormControl name=\"email\" type=\"email\" />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>\n            Phone\n            </ControlLabel>\n          <FormControl name=\"number\" type=\"number\" />\n        </FormGroup>\n        <FlexboxGrid>\n          <FlexboxGrid.Item>\n            <Whisper placement=\"right\" trigger=\"hover\" speaker={speaker} enterable>\n              <Icon icon=\"question2\" />\n            </Whisper>\n          </FlexboxGrid.Item>\n          <FlexboxGrid.Item>\n            <CustomField\n              name=\"type\"\n              label=\"Type\"\n              accepter={RadioGroup}\n            >\n              <Radio value={\"Premium\"}>Premium</Radio>\n              <Radio value={\"Select\"}>Select</Radio>\n            </CustomField>\n          </FlexboxGrid.Item>\n        </FlexboxGrid>\n        <CustomField\n          accepter={InputNumber}\n          name=\"amount\"\n          label=\"Amount\"\n          prefix={\"$\"}\n        />\n        <FormGroup>\n          <Button appearance=\"primary\" onClick={handleSubmit}>Submit</Button>\n        </FormGroup>\n      </Form>\n      <Modal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        size=\"xs\"\n      >\n        <Modal.Header>\n          <h5>Investment Confirmed</h5>\n        </Modal.Header>\n        <Modal.Body>\n          <Icon icon=\"check\" size=\"2x\" style={{ color: '#AED582' }} />\n          <p>Congratulations!</p>\n          <p>You have successfully made an investment with Earnr!</p>\n          <p>You will be contacted by the team shortly via email.</p>\n          <p>Thank you for choosing Earnr!</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button appearance=\"primary\" onClick={() => setModalShow(false)}>Great!</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nfunction CustomField({ accepter, name, label, ...props }) {\n  return (\n    <FormGroup>\n      <ControlLabel>{label}</ControlLabel>\n      <FormControl name={name} accepter={accepter} {...props} />\n    </FormGroup>\n  );\n}\n",{"ruleId":"24","severity":1,"message":"25","line":1,"column":20,"nodeType":"26","messageId":"27","endLine":1,"endColumn":29},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar"]